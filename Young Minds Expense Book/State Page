import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;

public class StatePage extends GridPane {
	// Labels
	Label state_id = new Label("State ID:");
	Label year = new Label("Year:");
	Label state_housing_cost = new Label("Housing Cost:");
	Label state_food_cost = new Label("Food Cost:");
	Label state_transportation_cost = new Label("Transportation Cost:");
	Label state_leisure_cost = new Label("Leisure Cost:");
	Label state_car_cost = new Label("Car Cost:");
	Label state_tax = new Label("State Tax:");

	// Text fields
	TextField tf1 = new TextField();
	TextField tf2 = new TextField();
	TextField tf3 = new TextField();
	TextField tf4 = new TextField();
	TextField tf5 = new TextField();
	TextField tf6 = new TextField();
	TextField tf7 = new TextField();
	TextField tf8 = new TextField();

	// Buttons
	Button add = new Button("Add");
	Button delete = new Button("Delete");
	Button update = new Button("Update");
	Button compare = new Button("Compare");
	Button exit = new Button("Exit");

	// ComboBox
	// ComboBox<String> budgetBox = new ComboBox<String>();

	public StatePage() {
		this.add(state_id, 0, 0, 1, 1);
		this.add(tf1, 1, 0, 1, 1);
		this.add(year, 0, 1, 1, 1);
		this.add(tf2, 1, 1, 1, 1);
		this.add(state_housing_cost, 0, 2, 1, 1);
		this.add(tf3, 1, 2, 1, 1);
		this.add(state_food_cost, 0, 3, 1, 1);
		this.add(tf4, 1, 3, 1, 1);
		this.add(state_transportation_cost, 0, 4, 1, 1);
		this.add(tf5, 1, 4, 1, 1);
		this.add(state_leisure_cost, 0, 5, 1, 1);
		this.add(tf6, 1, 5, 1, 1);
		this.add(state_car_cost, 0, 6, 1, 1);
		this.add(tf7, 1, 6, 1, 1);
		this.add(state_tax, 0, 7, 1, 1);
		this.add(tf8, 1, 7, 1, 1);
		this.add(add, 0, 9, 1, 1);
		this.add(delete, 1, 9, 1, 1);
		this.add(update, 2, 9, 1, 1);
		this.add(compare, 3, 9, 1, 1);
		this.add(exit, 4, 9, 1, 1);

		// set padding and spacing for widgets
		setMargin(state_id, new Insets(5));
		setMargin(tf1, new Insets(5));
		setMargin(year, new Insets(5));
		setMargin(tf2, new Insets(5));
		setMargin(state_housing_cost, new Insets(5));
		setMargin(tf3, new Insets(5));
		setMargin(state_food_cost, new Insets(5));
		setMargin(tf4, new Insets(5));
		setMargin(state_transportation_cost, new Insets(5));
		setMargin(tf5, new Insets(5));
		setMargin(state_leisure_cost, new Insets(5));
		setMargin(tf6, new Insets(5));
		setMargin(state_car_cost, new Insets(5));
		setMargin(tf7, new Insets(5));
		setMargin(state_tax, new Insets(5));
		setMargin(tf8, new Insets(5));

		// Create "Add" event
		add.setOnAction(e -> {
			try {
				addStateInfo();
			} catch (SQLIntegrityConstraintViolationException e1) {
				System.out.println("Please choose a diffrent primary key.");
			}
			System.out.println("Information has been added has been added.");
		});
		

		// Create "Delete" event
		delete.setOnAction(e -> {
			deleteStateInfo();
			System.out.println("Data has been deleted sucessfully");
		});
		

		// Create "Update" Event
		update.setOnAction(e -> {
			try {
				updateStateInfo();
			} catch (SQLIntegrityConstraintViolationException e1) {
				System.out.println("Please enter textfields with the correct syntax.");
				e1.printStackTrace();
			}
			System.out.println("State info was updated sucessfully");
		});

		// Create "Exit" Event
		exit.setOnAction(e -> {
			Platform.exit();
			System.out.println("Application has been closed.");
		});
	}

	public Connection getConnection() throws ClassNotFoundException {
		Connection conn;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/young_minds", "root", "");
			if (conn != null) {
				System.out.println("Accessing database...");
			}
			return conn;
		} catch (Exception ex) {
			System.out.println("Error " + ex.getMessage());
			return null;
		}
	}

	private Connection addStateInfo() throws SQLIntegrityConstraintViolationException {
		Connection conn = null;
		PreparedStatement pst;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/young_minds", "root", "");
			pst = conn.prepareStatement(
					"INSERT INTO State_Expenses (State_ID, Year, State_Housing_Cost, State_Food_Cost, State_Transportation_Cost, State_Leisure_Cost, State_Car_Cost, State_Tax)"
							+ "values(?,?,?,?,?,?,?,?)");
			pst.setString(1, tf1.getText());
			pst.setInt(2, Integer.parseInt(tf2.getText()));
			pst.setFloat(3, Float.parseFloat(tf3.getText()));
			pst.setFloat(4, Float.parseFloat(tf4.getText()));
			pst.setFloat(5, Float.parseFloat(tf5.getText()));
			pst.setFloat(6, Float.parseFloat(tf6.getText()));
			pst.setFloat(7, Float.parseFloat(tf7.getText()));
			pst.setFloat(8, Float.parseFloat(tf8.getText()));
			pst.executeUpdate();

		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		}
		return conn;
	}

	private Connection deleteStateInfo() {
		Connection conn = null;
		PreparedStatement pst;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/young_minds", "root", "");
			pst = conn.prepareStatement("DELETE FROM State_Expenses WHERE state_id = ?");
			pst.setString(1, tf1.getText());
			;
			pst.executeUpdate();
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		}
		return conn;
	}
	
	private Connection updateStateInfo() throws SQLIntegrityConstraintViolationException{
		Connection conn = null;
		PreparedStatement pst;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/young_minds", "root", "");
			System.out.println("Accessing database...");
			pst = conn.prepareStatement("UPDATE State_Expenses"
					+ " SET Year = ?, State_Housing_Cost = ?, State_Food_Cost = ?, State_Transportation_Cost = ?,  State_Leisure_Cost = ?, State_Car_Cost = ?, State_Tax = ?"
					+ " WHERE State_ID = ?");
			pst.setInt(1, Integer.parseInt(tf2.getText()));
			pst.setFloat(2, Float.parseFloat(tf3.getText()));
			pst.setFloat(3, Float.parseFloat(tf4.getText()));
			pst.setFloat(4, Float.parseFloat(tf5.getText()));
			pst.setFloat(5, Float.parseFloat(tf6.getText()));
			pst.setFloat(6, Float.parseFloat(tf7.getText()));
			pst.setFloat(7, Float.parseFloat(tf8.getText()));
			pst.setString(8, tf1.getText());
			pst.executeUpdate();

		} catch (SQLException se) {
			se.printStackTrace();

		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		}
		return conn;
	}
}
