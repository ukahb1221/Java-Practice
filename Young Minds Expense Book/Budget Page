import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;

public class BudgetPage extends GridPane {
	// Labels
	Label budget_id = new Label("Budget ID:");
	Label month = new Label("Month:");
	Label year = new Label("Year:");
	Label customer_id = new Label("Customer ID:");
	Label home_budget = new Label(" Home:");
	Label food_budget = new Label("Food:");
	Label transportation = new Label("Transportation:");
	Label car = new Label("Car:");
	Label lesiure = new Label("Lesiure:");

	// Text fields
	TextField tf1 = new TextField();
	TextField tf2 = new TextField();
	TextField tf3 = new TextField();
	TextField tf4 = new TextField();
	TextField tf5 = new TextField();
	TextField tf6 = new TextField();
	TextField tf7 = new TextField();
	TextField tf8 = new TextField();
	TextField tf9 = new TextField();
	TextField tf10 = new TextField();

	// Buttons
	Button add = new Button("Add");
	Button delete = new Button("Delete");
	Button update = new Button("Update");
	Button clear = new Button("Clear");
	Button exit = new Button("Exit");

	// ComboBox
	ComboBox<String> budgetBox = new ComboBox<String>();

	public BudgetPage() {
		// add widgets
		this.add(budget_id, 0, 0, 1, 1);
		this.add(tf1, 1, 0, 1, 1);
		this.add(month, 0, 1, 1, 1);
		this.add(tf2, 1, 1, 1, 1);
		this.add(year, 0, 2, 1, 1);
		this.add(tf3, 1, 2, 1, 1);
		this.add(customer_id, 0, 3, 1, 1);
		this.add(tf4, 1, 3, 1, 1);
		this.add(home_budget, 0, 4, 1, 1);
		this.add(tf5, 1, 4, 1, 1);
		this.add(food_budget, 0, 5, 1, 1);
		this.add(tf6, 1, 5, 1, 1);
		this.add(transportation, 0, 6, 1, 1);
		this.add(tf7, 1, 6, 1, 1);
		this.add(car, 0, 7, 1, 1);
		this.add(tf8, 1, 7, 1, 1);
		this.add(lesiure, 0, 8, 1, 1);
		this.add(tf9, 1, 8, 1, 1);
		this.add(add, 0, 9, 1, 1);
		this.add(delete, 1, 9, 1, 1);
		this.add(update, 2, 9, 1, 1);
		this.add(clear, 3, 9, 1, 1);
		this.add(exit, 4, 9, 1, 1);

		// set padding and spacing for widgets
		setMargin(budget_id, new Insets(5));
		setMargin(tf1, new Insets(5));
		setMargin(month, new Insets(5));
		setMargin(tf2, new Insets(5));
		setMargin(year, new Insets(5));
		setMargin(tf3, new Insets(5));
		setMargin(customer_id, new Insets(5));
		setMargin(tf4, new Insets(5));
		setMargin(home_budget, new Insets(5));
		setMargin(tf5, new Insets(5));
		setMargin(food_budget, new Insets(5));
		setMargin(tf6, new Insets(5));
		setMargin(transportation, new Insets(5));
		setMargin(tf7, new Insets(5));
		setMargin(car, new Insets(5));
		setMargin(tf8, new Insets(5));
		setMargin(lesiure, new Insets(5));
		setMargin(tf9, new Insets(5));
		setMargin(tf10, new Insets(5));
		setMargin(update, new Insets(5));
		setMargin(clear, new Insets(5));
		

		// Create "Add" event
		add.setOnAction(e -> {
			addBudgetInfo();
			System.out.println("Data has been added.");
		});

		// Create "Delete" event
		delete.setOnAction(e -> {
			deleteBudgetInfo();
			System.out.println("Data has been deleted sucessfully");
		});

		// Create "Update" Event
		update.setOnAction(e -> {
			updateBudgetInfo();
			System.out.println("Data has been updated sucessfully");
		});

		// Create "Clear" event
		clear.setOnAction(e -> {
			tf1.clear();
			tf2.clear();
			tf3.clear();
			tf4.clear();
			tf5.clear();
			tf6.clear();
			tf7.clear();
			tf8.clear();
			tf9.clear();

			System.out.println("All text fields are have been cleared.");
		});
		// Create "Exit" Event
		exit.setOnAction(e -> {
			Platform.exit();
			System.out.println("Application has been closed.");

		});
		
		budgetBox.getItems().addAll(selectUsers());
		budgetBox.getSelectionModel().select(0);
		add(budgetBox, 2, 0, 1, 1);
		budgetBox.setOnAction(e -> budgetBoxEventHandler());
	}
	
	private void budgetBoxEventHandler() {
		String selectedRow = budgetBox.getValue();
		String[] tokens = selectedRow.split(",");
		tf1.setText(tokens[0]);// budget id
		tf2.setText(tokens[1]); // month
		tf3.setText(tokens[2]);// year
		tf4.setText(tokens[3]);// customer_id
		tf5.setText(tokens[4]);// estimated home budget
		tf6.setText(tokens[5]);// estimated food budget
		tf7.setText(tokens[6]);// estimated transportation budget
		tf8.setText(tokens[7]);// estimated car budget
		tf9.setText(tokens[8]);// estimated leisure budget
		System.out.println("John Doe");
	}


	public Connection getConnection() throws ClassNotFoundException {
		Connection conn;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/young_minds", "root", "");
			if (conn != null) {
				System.out.println("Accessing database...");
			}
			return conn;
		} catch (Exception ex) {
			System.out.println("Error " + ex.getMessage());
			return null;
		}
	}

	private Connection addBudgetInfo() {
		Connection conn = null;
		PreparedStatement pst;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/young_minds", "root", "");
			pst = conn.prepareStatement(
					"INSERT INTO Budget (budget_id, month, year, customers_id, home_estimated_budget, food_estimated_budget, transportation_estimated_budget , car_estimated_budget, leisure_estimated_budget )"
							+ "values(?,?,?,?,?,?,?,?,?)");
			pst.setInt(1, Integer.parseInt(tf1.getText()));
			pst.setInt(2, Integer.parseInt(tf2.getText()));
			pst.setInt(3, Integer.parseInt(tf3.getText()));
			pst.setInt(4, Integer.parseInt(tf4.getText()));
			pst.setFloat(5, Float.parseFloat(tf5.getText()));
			pst.setFloat(6, Float.parseFloat(tf6.getText()));
			pst.setFloat(7, Float.parseFloat(tf7.getText()));
			pst.setFloat(8, Float.parseFloat(tf8.getText()));
			pst.setFloat(9, Float.parseFloat(tf9.getText()));
			pst.executeUpdate();

		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		}
		return conn;
	}

	private Connection deleteBudgetInfo() {
		Connection conn = null;
		PreparedStatement pst;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/young_minds", "root", "");
			pst = conn.prepareStatement("DELETE FROM Budget WHERE month = ? AND customers_id = ?");
			pst.setInt(1, Integer.parseInt(tf2.getText()));
			pst.setInt(2, Integer.parseInt(tf4.getText()));
			pst.executeUpdate();
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		}
		return conn;
	}

	private Connection updateBudgetInfo() {
		Connection conn = null;
		PreparedStatement pst;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/young_minds", "root", "");
			System.out.println("Accessing database...");
			pst = conn.prepareStatement("UPDATE Budget"
					+ " SET month = ?, year = ?, customers_id = ?, home_estimated_budget = ?,  food_estimated_budget = ?, transportaion_estimated_budget = ?, car_estimated_budget = ?, leisure_estimated_budget = ?"
					+ " WHERE budget_id = ?");
			pst.setInt(1, Integer.parseInt(tf2.getText()));
			pst.setInt(2, Integer.parseInt(tf3.getText()));
			pst.setInt(3, Integer.parseInt(tf4.getText()));
			pst.setFloat(4, Float.parseFloat(tf5.getText()));
			pst.setFloat(5, Float.parseFloat(tf6.getText()));
			pst.setFloat(6, Float.parseFloat(tf7.getText()));
			pst.setFloat(7, Float.parseFloat(tf8.getText()));
			pst.setFloat(8, Float.parseFloat(tf9.getText()));
			pst.setInt(9, Integer.parseInt(tf1.getText()));
		} catch (SQLException se) {
			se.printStackTrace();

		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		}
		return conn;
	}
	
	private ArrayList<String> selectUsers() {
		String sqlSelectRowStatement = "SELECT * FROM Budget";
		ArrayList<String> budgetBox = new ArrayList<>();
		PreparedStatement preparedStatement;
		Connection conn;
		ResultSet rs;

		try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/young_minds", "root", "");
			preparedStatement = conn.prepareStatement(sqlSelectRowStatement);
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				String cust = rs.getInt(1) + "," + // get customer ID
				rs.getInt(2) + "," + // get first name
				rs.getInt(3) + "," +// get last name
				rs.getInt(4) + "," +
				rs.getInt(5) + "," +
				rs.getFloat(6) + "," +
				rs.getFloat(7) + "," +
				rs.getFloat(8) + "," +
				rs.getFloat(9)+ ",";
				budgetBox.add(cust);
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		return budgetBox;
	}
}
